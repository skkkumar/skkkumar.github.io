AFRAME.registerComponent("resonance-audio-src",{dependencies:["geometry","position"],multiple:!1,schema:{src:{type:"string",default:""},channel:{type:"string",default:"both"},loop:{type:"boolean",default:!0},autoplay:{type:"boolean",default:!0},alpha:{type:"number",default:0},sharpness:{type:"number",default:1},gain:{type:"number",default:1},maxDistance:{type:"number",default:1e3},sourceWidth:{type:"number",default:60},streamObject:{default:{},parse:function(value){return value}}},init(){this.setMediaSrc=this.setMediaSrc.bind(this),this.setMediaStream=this.setMediaStream.bind(this),this.exposeAPI=this.exposeAPI.bind(this),this.disconnectPreviousSrc=this.disconnectPreviousSrc.bind(this),this.connectedSrc={},this.connectedSrc.element=!1,this.connectedSrc.stream=!1,this.pos=new AFRAME.THREE.Vector3,this.el.parentEl.addEventListener("loaded",this.postLoadInit.bind(this)),this.exposeAPI(),this.initialPlay=!0;const attrStartsWith=prefix=>!!Array.from(document.querySelectorAll("*")).filter(e=>Array.from(e.attributes).filter(({name:name,value:value})=>name.startsWith(prefix)).length);this.isBeatSync=attrStartsWith("beat-sync"),this.throttledFunction=AFRAME.utils.throttle(this.setPosition,40,this)},postLoadInit(){this.el.parentEl.removeEventListener("loaded",this.postLoadInit.bind(this)),this.room=this.el.parentEl.components["resonance-audio-room"],this.resonanceAudioScene=this.room.resonanceAudioScene,this.resonanceAudioContext=this.room.resonanceAudioContext,this.setMediaSrc(this.data.src)},update(oldData){this.initialPlay||(oldData.src!==this.data.src?this.setMediaSrc(this.data.src):this.setupSource())},exposeAPI(){const descriptor_src={set:value=>{this.setMediaSrc(value)},get:()=>this.data.src},descriptor_streamObject={set:value=>{this.setMediaStream(value)},get:()=>this.data.streamObject};Object.defineProperty(this.el,"src",descriptor_src),Object.defineProperty(this.el,"srcObject",descriptor_streamObject),Object.defineProperty(this,"src",descriptor_src),Object.defineProperty(this,"srcObject",descriptor_streamObject)},setMediaSrc(src){var self=this;if("string"!=typeof src)throw new TypeError("invalid src");if("#"===src.charAt(0)){const el=document.querySelector(src);if(!el)throw new Error("invalid src");src=el.getAttribute("src"),this.sourceNode=el,this.connectElementSrc()}else{if(""===src||void 0===src)return;fetch(src,{mode:"cors"}).then(function(resp){return resp.arrayBuffer()}).then(function(buffer){self.resonanceAudioContext.decodeAudioData(buffer,function(audioData){self.sourceNode=self.resonanceAudioContext.createBufferSource(),self.sourceNode.buffer=audioData,self.connectBufferSrc()})})}this.el.setAttribute("resonance-audio-src",{streamObject:null,src:src})},setMediaStream(mediaStream){if(!(mediaStream instanceof MediaStream)&&null!=mediaStream)throw new TypeError("not a mediastream");this.el.setAttribute("resonance-audio-src",{streamObject:mediaStream,src:""}),this.room.connectStreamSrc(mediaStream)},disconnectPreviousSrc(){this.connectedSrc.buffer&&(this.audioBufferSourceNode.disconnect(this.resonanceAudioSceneSource.input),delete this.audioBufferSourceNode,this.connectedSrc.buffer=!1),this.connectedSrc.element&&(this.mediaElementAudioNode.disconnect(this.resonanceAudioSceneSource.input),delete this.mediaElementAudioNode,this.connectedSrc.element=!1),this.connectedSrc.stream&&(this.mediaStreamAudioNode.disconnect(this.resonanceAudioSceneSource.input),delete this.mediaStreamAudioNode,this.connectedSrc.stream=!1)},connectBufferSrc(){this.disconnectPreviousSrc(),this.resonanceAudioSceneSource||(this.resonanceAudioSceneSource=this.resonanceAudioScene.createSource()),this.sourceNode.connect(this.resonanceAudioSceneSource.input),this.connectedSrc.buffer=!0,this.data.loop&&(this.sourceNode.loop=!0),this.setupSource()},connectElementSrc(){this.disconnectPreviousSrc(),this.el.sceneEl.mediaElementAudioNode||(this.el.sceneEl.mediaElementAudioNode=this.resonanceAudioContext.createMediaElementSource(this.sourceNode),this.el.sceneEl.splitter=this.resonanceAudioContext.createChannelSplitter(2),this.el.sceneEl.mediaElementAudioNode.connect(this.el.sceneEl.splitter)),this.mediaElementAudioNode=this.el.sceneEl.mediaElementAudioNode,this.splitter=this.el.sceneEl.splitter,this.merger=this.resonanceAudioContext.createChannelMerger(),"both"===this.data.channel?(this.splitter.connect(this.merger,0),this.splitter.connect(this.merger,1)):"left"===this.data.channel?this.splitter.connect(this.merger,0):this.splitter.connect(this.merger,1),this.resonanceAudioSceneSource||(this.resonanceAudioSceneSource=this.resonanceAudioScene.createSource()),this.merger.connect(this.resonanceAudioSceneSource.input),this.connectedSrc.element=!0,this.data.loop?this.sourceNode.setAttribute("loop","true"):this.sourceNode.removeAttribute("loop"),this.setupSource()},setupSource(){this.resonanceAudioSceneSource.setDirectivityPattern(this.data.alpha,this.data.sharpness),this.resonanceAudioSceneSource.setGain(this.data.gain),this.resonanceAudioSceneSource.setMaxDistance(this.data.maxDistance),this.resonanceAudioSceneSource.setSourceWidth(this.data.sourceWidth),this.data.autoplay&&"running"===this.resonanceAudioContext.state&&!this.isBeatSync&&this.playSound()},playSound(){this.connectedSrc.element?this.sourceNode.play().catch(function(err){console.log(err)}):this.connectedSrc.buffer&&this.sourceNode.start()},pauseSound(){this.sourceNode&&(this.connectedSrc.element?this.sourceNode.pause():this.connectedSrc.buffer&&this.sourceNode.stop())},play(){this.data.autoplay||!this.initialPlay?("running"!==this.resonanceAudioContext.state||this.isBeatSync||this.playSound(),this.initialPlay&&(this.initialPlay=!1)):this.initialPlay=!1},pause(){this.pauseSound()},tick(){this.throttledFunction()},remove(){this.pauseSound(),this.sourceNode=null},setPosition(){this.resonanceAudioSceneSource&&this.resonanceAudioSceneSource.setFromMatrix(this.el.object3D.matrixWorld)}}),AFRAME.registerPrimitive("a-resonance-audio-src",{defaultComponents:{"resonance-audio-src":{}},mappings:{src:"resonance-audio-src.src",channel:"resonance-audio-src.channel",loop:"resonance-audio-src.loop",autoplay:"resonance-audio-src.autoplay",alpha:"resonance-audio-src.alpha",sharpness:"resonance-audio-src.sharpness",gain:"resonance-audio-src.gain",maxDistance:"resonance-audio-src.maxDistance",sourceWidth:"resonance-audio-src.sourceWidth",streamObject:"resonance-audio-src.streamObject"}});